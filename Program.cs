// Разработка web-приложения на C# (семинары) 
// Урок 4. Безопасность и контейнеризация приложений Научитесь собирать докер образы с зависимостями удалив работу 
// с базой из проекта GraphQL-сервера и подключив ее как зависимость отдельным проектом из первого практического занятия. 
// Подготовьте докер-образы для всех приложений(API-Gateway и сервисы библиотеки) из лекции посвященной микросервисам и 
// запустите приложение путем составления compose-файла для запуска всех необходимых контейнеров.


// Шаг 1: Разделение проекта GraphQL-сервера и базы данных
// Сначала создадим новый проект для базы данных. Создайте новый проект в вашем решении и добавьте к нему все 
// необходимые зависимости для работы с базой данных (например, Entity Framework Core). Затем вынесите все операции с базой данных 
// из вашего проекта GraphQL-сервера в этот новый проект.


// Шаг 2: Создание докер-образа для базы данных
// Теперь создайте Dockerfile для вашего проекта базы данных.
// В Dockerfile укажите все необходимые шаги для сборки образа, включая установку зависимостей, копирование файлов проекта и запуск приложения.
// Пример Dockerfile для проекта базы данных:

```

FROM microsoft/dotnet:2.1-sdk as build

WORKDIR /app


# Установка зависимостей

COPY *.csproj .

RUN dotnet resotre


# Копирование файлов проекта

COPY . .

RUN dotnet build

RUN dotnet publish -c Release -o out


# Настройка приложения

ENTRYPOINT ["dotnet", "out/DatabaseProject.dll"]

```

// Шаг 3: Создание докер-образов для остальных приложений
// Также создайте Dockerfile для вашего проекта API-Gateway и других сервисов библиотеки. 
// Подготовьте их к сборке в отдельные докер-образы, учитывая все необходимые зависимости и шаги для сборки.


// Шаг 4: Составление compose-файла
// Создайте compose-файл для запуска всех необходимых контейнеров (GraphQL-сервера, базы данных, API-Gateway и сервисов библиотеки). 
// В compose-файле укажите все контейнеры, их настройки и зависимости друг от друга.
// Пример compose-файла:


```yaml

version: '3'


services:

 graphql-server:

 image: graphql-server

 ports:

 - "5000:5000"

 depends_on:

 - database

 
 api-gateway:

 image: api-gateway

 ports:

 - "5001:5001"

 depends_on:

 - graphql-server

 
 database:

 image: database

```


// Шаг 5: Запуск приложения
// Для запуска приложения выполните команду `docker-compose up` в терминале.
// Docker compose соберет и запустит все контейнеры из вашего compose-файла, и вы сможете тестировать и использовать 
// ваше веб-приложение в контейнеризованной среде.
// Теперь у вас есть безопасное и контейнеризованное веб-приложение на C#!



// Разработка web-приложения на C# (семинары) 
// Урок 4. Безопасность и контейнеризация приложений Научитесь собирать докер образы с зависимостями удалив работу с 
// базой из проекта GraphQL-сервера и подключив ее как зависимость отдельным проектом из первого практического занятия. 
// Подготовьте докер-образы для всех приложений(API-Gateway и сервисы библиотеки) из лекции посвященной микросервисам и 
// запустите приложение путем составления compose-файла для запуска всех необходимых контейнеров.

// Шаг 1: Создание проекта базы данных
// Для начала создайте отдельный проект базы данных в вашем решении Visual Studio. В этом проекте вы можете определить таблицы, 
// хранимые процедуры, представления и другие объекты базы данных, необходимые для работы вашего приложения.
// После того, как проект базы данных создан, выполните необходимые операции с базой данных из вашего проекта GraphQL-сервера, например, 
// создание таблиц, добавление данных, выполнение запросов и т.д.

// Шаг 2: Dockerfile для базы данных
// Создайте Dockerfile для вашего проекта базы данных. В Dockerfile укажите все необходимые шаги для сборки образа, включая установку зависимостей, 
// копирование файлов проекта и запуск приложения.
// Пример Dockerfile для проекта базы данных:

```
FROM microsoft/mssql-server-linux:latest
ENV SA_PASSWORD=yourStrong(!)Password
ENV ACCEPT_EULA=Y
WORKDIR /src
COPY . .
CMD /bin/bash entrypoint.sh
```

// Шаг 3: Создание compose-файла
// Создайте compose-файл для запуска контейнера базы данных. В compose-файле укажите настройки контейнера базы данных, такие как порты, 
// переменные окружения и зависимости от других сервисов.
// Пример compose-файла:

```yaml
version: '3'

services:
database:
container_name: my-database
image: my-database
environment:
- SA_PASSWORD=yourStrong(!)Password
- ACCEPT_EULA=Y
ports:
- "1433:1433"
```

// Шаг 4: Запуск контейнера базы данных
// Для запуска контейнера базы данных выполните команду `docker-compose up` в терминале. 
// Docker compose соберет и запустит контейнер базы данных из вашего compose-файла, и вы сможете 
// использовать ваше веб-приложение с подключенной контейнеризованной базой данных.



// Разработка web-приложения на C# (семинары)
// Урок 4. Безопасность и контейнеризация приложений
// Научитесь собирать докер образы с зависимостями удалив работу с 
// базой из проекта GraphQL-сервера и подключив ее как зависимость отдельным проектом из первого практического занятия.
// Подготовьте докер-образы для всех приложений(API-Gateway и сервисы библиотеки) из лекции посвященной микросервисам и
// запустите приложение путем составления compose-файла для запуска всех необходимых контейнеров.

// Для начала удалим работу с базой из проекта graphql-сервера
// Добавим зависимость на отдельный проект с базой
// Подготовим докер-образы для всех приложений и напишем compose-файл

// Dockerfile для API Gateway
FROM microsoft/dotnet:2.2-sdk AS build-env
WORKDIR /app

COPY . ./
RUN dotnet publish -c Release -o out

FROM microsoft/dotnet:2.2-aspnetcore-runtime
WORKDIR /app
COPY --from=build-env /app/out .

ENTRYPOINT ["dotnet", "ApiGateway.dll"]

// Dockerfile для сервисов библиотеки
FROM microsoft/dotnet:2.2-sdk AS build-env
WORKDIR /app

COPY . ./
RUN dotnet publish -c Release -o out

FROM microsoft/dotnet:2.2-aspnetcore-runtime
WORKDIR /app
COPY --from=build-env /app/out .

ENTRYPOINT ["dotnet", "LibraryService.dll"]

// Составляем compose-файл
version: '3'

services:
  api-gateway:
    image: api-gateway
    build:
      context: .
      dockerfile: Dockerfile

  library-service:
    image: library-service
    build:
      context: .
      dockerfile: Dockerfile

// Запускаем приложение с помощью docker-compose up
// Это решение позволит создать докер-образы для всех приложений из лекции и запустить их с помощью compose-файла, обеспечив безопасность и контейнеризацию приложений.



// Разработка web-приложения на C# (семинары)
// Урок 4. Безопасность и контейнеризация приложений
// Научитесь собирать докер образы с зависимостями удалив работу с базой из проекта GraphQL-сервера и подключив ее как зависимость
// отдельным проектом из первого практического занятия.
// Подготовьте докер-образы для всех приложений(API-Gateway и сервисы библиотеки) из лекции посвященной микросервисам и запустите приложение
// путем составления compose-файла для запуска всех необходимых контейнеров.

// Загрузка зависимости отдельным проектом из первого практического занятия
// В проекте graphql-сервера удаляем работу с базой данных и выносим ее в отдельный проект
// Dockerfile для graphql-сервера

FROM microsoft/dotnet:2.2-sdk AS build
WORKDIR /app

COPY . .
RUN dotnet publish -c Release -o out

FROM microsoft/dotnet:2.2-aspnetcore-runtime AS runtime
WORKDIR /app
COPY --from=build /app/out .
EXPOSE 80
ENTRYPOINT ["dotnet", "GraphQLServer.dll"]

// Подготовка docker-образов для всех приложений
// Dockerfile для api-gateway

FROM microsoft/dotnet:2.2-sdk AS build
WORKDIR /app

COPY . .
RUN dotnet publish -c Release -o out

FROM microsoft/dotnet:2.2-aspnetcore-runtime AS runtime
WORKDIR /app
COPY --from=build /app/out .
EXPOSE 80
ENTRYPOINT ["dotnet", "ApiGateway.dll"]

// Dockerfile для сервиса библиотеки

FROM microsoft/dotnet:2.2-sdk AS build
WORKDIR /app

COPY . .
RUN dotnet publish -c Release -o out

FROM microsoft/dotnet:2.2-aspnetcore-runtime AS runtime
WORKDIR /app
COPY --from=build /app/out .
EXPOSE 80
ENTRYPOINT ["dotnet", "LibraryService.dll"]

// Compose файл для запуска всех контейнеров

version: '3.4'

services:
  graphql-server:
    build:
      context: .
      dockerfile: Dockerfile.graphql-server
    ports:
      - "5000:80"
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api-gateway
    ports:
      - "5001:80"
  library-service:
    build:
      context: .
      dockerfile: Dockerfile.library-service
    ports:
      - "5002:80"



// Разработка web-приложения на C# (семинары)
// Урок 4. Безопасность и контейнеризация приложений
// Научитесь собирать докер образы с зависимостями удалив работу с базой из проекта GraphQL-сервера и подключив ее как зависимость
// отдельным проектом из первого практического занятия.Подготовьте докер-образы для всех приложений(API-Gateway и сервисы библиотеки) 
// из лекции посвященной микросервисам и запустите приложение путем составления compose-файла для запуска всех необходимых контейнеров.

// Для начала, вам нужно будет добавить в ваш GraphQL-сервер проект зависимость от вашей базы данных,
// а затем вынести логику работы с базой данных из вашего проекта GraphQL-сервера в отдельный проект, 
// который будет представлять собой отдельный микросервис. 


// 1. Добавление зависимости в проект GraphQL-сервера:
//  - Установите необходимый пакет для работы с вашей базой данных в проект GraphQL-сервера (например, Entity Framework Core для работы с SQL Server).
//  - Настройте соединение с вашей базой данных (строка подключения).

// 2. Создание отдельного проекта для работы с базой данных:
//  - Создайте новый проект в вашем решении (например, DataLayer).
//  - Перенесите логику работы с базой данных из вашего проекта GraphQL-сервера в новый проект.
//  - Убедитесь, что ваш новый проект работает корректно с вашей базой данных.

// 3. Создание Docker образа для проекта GraphQL-сервера:
//  - Создайте Dockerfile в вашем проекте GraphQL-сервера.
//  - Определите необходимые шаги для сборки образа (установка зависимостей, копирование файлов проекта, запуск приложения).
//  - Соберите Docker образ для проекта GraphQL-сервера.

// 4. Создание Docker образа для отдельного микросервиса для работы с базой данных:
//  - Создайте Dockerfile в вашем новом проекте для работы с базой данных.
//  - Определите необходимые шаги для сборки образа (установка зависимостей, копирование файлов проекта, запуск приложения).
//  - Соберите Docker образ для отдельного микросервиса.

// 5. Создание compose-файла для запуска всех контейнеров:
//  - Создайте docker-compose.yml файл в корневой папке вашего проекта.
//  - Определите сервисы для каждого Docker образа (GraphQL-сервер, микросервис для работы с базой данных).
//  - Укажите необходимую конфигурацию (порты, переменные среды и пр.).
//  - Запустите все контейнеры из compose-файла с помощью команды `docker-compose up`.

// Теперь у вас должно быть полностью контейнеризованное приложение, состоящее из GraphQL-сервера и микросервиса для работы с базой данных,
// который подключается как зависимость к GraphQL-серверу.
// Для начала, вам нужно собрать Docker образы для каждого приложения (API-Gateway, сервисы библиотеки) из практического занятия по микросервисам. 
// Для этого вам потребуется создать Dockerfile для каждого приложения, в котором будет описаны шаги по установке зависимостей, копированию файлов и запуску приложения.
// Пример Dockerfile для ASP.NET Core приложения на C#:

FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build

WORKDIR /app

// копирование и восстановление зависимостей

COPY *.csproj ./

RUN dotnet resore

// копирование и сборка проекта

COPY . ./

RUN dotnet publish -c Release -o out

// создание образа с исполняемым файлом

FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS runtime

WORKDIR /app

COPY --from=build /app/out ./

ENTRYPOINT ["dotnet", "YourApp.dll"]

// Поменяйте YourApp.dll на название вашего исполняемого файла. Повторите эти шаги для каждого приложения.
// Затем создайте compose-файл для запуска всех необходимых контейнеров. Пример compose-файла:

version: '3.8'

services:

api-gateway:

image: your-api-gateway-image

ports:

  - "80:80"

depends_on:

  - service-library

service-library:

image: your-service-library-image

// Замените your-api-gateway-image и your-service-library-image на названия ваших Docker образов. 
// Запустите ваше приложение командой docker-compose up.
// Теперь ваше веб-приложение на C# с контейнеризацией и безопасностью будет готово к использованию.

